#+title: Roadmap

Don't remove elements from here until version released, then use this file to
populate the changelog.

* Next

Next version: 1.1

** DONE Dataset version 1 (not compatible with 0)
   CLOSED: [2021-09-20 Mon 19:33]

*** DONE Dataset versioning
    CLOSED: [2021-08-03 Tue 12:57]
Version field in config.toml, Dataset config.toml without version is version 0

*** DONE migration command
    CLOSED: [2021-08-03 Tue 12:57]

*** DONE Dict of tags
    CLOSED: [2021-08-04 Wed 13:03]
Move tags from a list to a (default)dict

- [X] Migrate json files
- [X] Grapheme
- [X] BoundGrapheme
- [X] CLI (generate, dataset, extract)
- [X] Web interface
- [X] Nets

*** DONE Test & Doc
    CLOSED: [2021-09-20 Mon 19:33]

- [X] Test with real corpus
- [X] Documentation
- [X] Fix Examples

** DONE Improve train/test set
   CLOSED: [2021-09-20 Mon 20:01]

Also for dataset version 1.

Instead of train/test "sets", now a "fold" value for annotations. `split`
command assigns this value (a number) randomly. The fold is tracked through
extract and generate commands.

Train and test sets are configured in config.toml as sets of folds to include in
each. Changing this can be useful for k-fold cross-validation. Also the
proportions of training and test annotations can be changed without having to
modify annotations or re-run processess. Finally, some folds can be held out,
not included in either train or test.

This is better than "lists" of annotations because we need to keep track where
extracted graphemes come from, and generated logograms, so test sets are not
cross-contaminated.

*** DONE Change "set" to "fold" in annotation
    CLOSED: [2021-09-11 Sat 19:31]

- [X] Code
- [X] Migration

*** DONE Fix split command
    CLOSED: [2021-09-11 Sat 20:03]

*** DONE Use folds
    CLOSED: [2021-09-13 Mon 15:36]

- [X] config.toml
- [X] default_config
- [X] migration of config
- [X] is_train/is_test methods, networks use this
- [X] web app

*** DONE Conserve folds
    CLOSED: [2021-09-13 Mon 18:59]

- [X] extract
- [X] generate

*** DONE Use different range for split
    CLOSED: [2021-09-16 Thu 20:25]

Allow the split command to use only some of the values for fold, so that more
sophisticated splits can be done, eg assign fold 1 to some subset that you
always want to be in `train`, etc.

*** DONE Test and doc
    CLOSED: [2021-09-20 Mon 20:01]

- [X] Test correct numbers
- [X] Test correct train/test usage
- [X] Test conserve
- [X] Doc

** DONE Net config improvements
   CLOSED: [2021-09-16 Thu 20:07]

*** DONE Improve multi tags
    CLOSED: [2021-09-13 Mon 14:01]

We now join using FS ASCII (`^_`, u+001F, ). It is ASCII, so plays well with
C, and hopefully no compat problems, but is a control character so users' tags
shouldn't contain it. And additionally, it is the actual correct semantics for
the character.

*** DONE Configure max epochs and size for YOLO
    CLOSED: [2021-09-16 Thu 20:06]

** DONE Annotation flags
   CLOSED: [2021-09-16 Thu 21:42]

In `config.toml`, an option map for "flags". This flags are tags in metadata
that can only be true/false. In the web interface, they are presented as
checkboxes with an icon with is an emoji/other unicode character. This icon is
the value in the option map in config, and it is shown in the list too for quick
detection of problems/TODOs.

** Other

*** DONE Memoize networks
    CLOSED: [2021-09-13 Mon 21:36]

`dataset.get_network` stores the network, so you can call it as many times as
you want without memory leaks and no overhead, no need to memoize the `Network`
yourself.

*** DONE Allow using touch in mobile devices

* Backlog

** TODO Web interface improvements

*** TODO Filter/search annotations in listing according to some tag(s).

*** TODO Autosuggest values for tagging
maybe use https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist

*** TODO Improve messaging
Remove "saved" message when doing changes (inconsistent), maybe load indicator

*** TODO Allow deleting entries
Maybe just move the last to the hole?

*** TODO Better mobile interface
Maybe integrate with camera/scan app, make quevedo a target for "sharing"
(uploading) images.

*** TODO Web user improvements
User groups, record annotator in json.

*** TODO Documentation

- [ ] "flags" (from v1.1)
- [ ] changes from v1.2

** TODO Improve use of scripts when modifing images

When scripts modify images, don't save them, but return that it has been
modified (ie return modified_tags, modified_img) and then it is `run_script`
that saves the image to the appropriate path. Coversely, in the web interface
the updated image can be sent to the frontend to be previewed, and if they want
to save it send it back to the server on "save". The complication is that the
image is now frontend state, not just a src link.
