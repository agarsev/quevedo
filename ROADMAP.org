#+title: Roadmap

* Version 1.2

** TODO Data augmentation

Incorporate VISSE code of data augmentation to replace the existing module. The
idea is to use user code to generate examples, because they know how their tags
work. We can still provide the image generation and grapheme placement with
force simulation for logogram generation.

- [ ] Generate graphemes
- [ ] Generate logograms

** DONE Improve detector network use of tags

- [X] Allow detector networks to train without any classification, only detecting
bounding boxes. Set `tag` option in the network config to the empty string for
that.
- [X] Allow using "empty" tags in training, don't skip unnanotated objects
  WARN: BREAKING!

** DONE Improve test command
   CLOSED: [2021-09-28 Tue 19:46]

- The predictions csv now has more info, like image path and confidence of
  prediction, and IOU of box for detection
- Improved the match algorithm for graphemes and predictions
- Networks now have an optional 'threshold' config param for testing

** DONE Improve scripts handling
   CLOSED: [2021-10-14 Thu 21:45]

Handle scripts arguments for them

** TODO Pipeline

*** DONE Pipeline class and factory method
    CLOSED: [2021-11-10 Wed 20:04]

*** DONE Test and predict with pipeline
    CLOSED: [2021-11-11 Thu 19:19]

Created 'inference' module

- [X] -P flag for cli alternative to net
- [X] predict cli uses pipeline too
- [X] test cli uses pipeline too

*** DONE Improve default
    CLOSED: [2021-11-11 Thu 19:38]

- [X] Remove default as net param
- [X] Remove default from default config
- [X] make a single dataset param default which is either a pipeline or
  network. It is added as param to the click context object in CLI entry point.

*** TODO Pipeline in web interface

*** TODO Test

The pipelines from VisSE cover all options to be checked, use them.

- [X] Test predict
- [X] Test test
- [X] Test default
- [ ] Test web

*** TODO Documentation

- [ ] dataset get_info about pipeline
- [ ] Writeup

** DONE Add example dataset
   CLOSED: [2021-10-15 Fri 14:41]

Added the example toy arithmetic dataset to the repo as suggested by
@albertodiazatfdi

** Bugfixes

*** DONE Macro F-score calculation was using recall value.

* Backlog

** TODO Web interface improvements

*** TODO Filter/search annotations in listing according to some tag(s).

*** TODO Autosuggest values for tagging
maybe use https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist

*** TODO Improve messaging
Remove "saved" message when doing changes (inconsistent), maybe load indicator

*** TODO Allow deleting entries
Maybe just move the last to the hole?

*** TODO Better mobile interface
Maybe integrate with camera/scan app, make quevedo a target for "sharing"
(uploading) images.

*** TODO Web user improvements
User groups, record annotator in json.

*** TODO Improve CSS

- Add CSS Normalization/reset
- Improve the style

*** TODO Documentation

- [ ] "flags" (from v1.1)
- [ ] changes from v1.2

** TODO Improve use of scripts when modifing images

When scripts modify images, don't save them, but return that it has been
modified (ie return modified_tags, modified_img) and then it is `run_script`
that saves the image to the appropriate path. Coversely, in the web interface
the updated image can be sent to the frontend to be previewed, and if they want
to save it send it back to the server on "save". The complication is that the
image is now frontend state, not just a src link.

** TODO Migrate to alternative ML library

Study migrating to a python-based ML library.

** TODO Grapheme dependency trees

*** TODO Code representation

A "parent" field for BoundGraphemes, and some kind of ID (better not use
indices, arrays are always problematic).

*** TODO Web annotation

A tab that presents an alternative interface. In the drag and drop, drag from
object to object to establish the child-parent link (visualized as an arrow). In
the table side, how to visualize?

*** TODO Logogram use

Access the tree from the logogram.
