<!doctype html>
<html>
<head>
    <style>
        svg {
            width: 50vw;
            height: 40vw;
            background: gray;
        }
        symbol-entry {
            border: 1px solid gray;
        }
    </style>
</head>
<body>
    <h1>Editar <%= id %></h1>
    <ul>
        <%- meanings.map(meaning => `<li><meaning-entry value="${meaning}" />`) %>
        <button onClick="add_meaning()">➕</button>
    </ul>
    <svg id="annot_svg" xmlns="http://www.w3.org/2000/svg" >
        <image href="/img/<%=id %>.png" width="100%" height="100%" />
        <g id="boxes">
        </g>
    </svg>
    <ul id="symbol_list">
        <%- symbols.map(symbol => `<li><symbol-entry />`) %>
        <button onClick="add_symbol()">➕</button>
    </ul>

    <script>
        function create (parent, tag, attrs, inner) {
            const el = document.createElement(tag);
            for (key in attrs) {
                el.setAttribute(key, attrs[key]);
            }
            if (inner) el.innerHTML = inner;
            parent.appendChild(el);
            return el;
        }

        const meaning_list = document.getElementById("meaning_list");
        function add_meaning () {
            const li = document.createElement("li");
            li.innerHTML = "<meaning-entry />";
            meaning_list.appendChild(li);
        }
        class MeaningEntry extends HTMLElement {
            constructor () {
                super();
                this.innerHTML = `<input type="text" value="${this.getAttribute("value")}" />`;
            }
        }
        customElements.define('meaning-entry', MeaningEntry);

        let current_box = null, draw = null;
        const svg = document.querySelector("#annot_svg");
        const trans = document.querySelector("#annot_svg image");
        const boxes_layer = document.getElementById("boxes");
        trans.addEventListener('mousedown', e => {
            if (current_box) {
                const { left, top } = trans.getBoundingClientRect();
                const x = e.clientX - left;
                const y = e.clientY - top;
                draw = { x, y };
                current_box.setAttributeNS(null, 'x', x);
                current_box.setAttributeNS(null, 'y', y);
                current_box.setAttributeNS(null, 'width', 0);
                current_box.setAttributeNS(null, 'height', 0);
            }
            e.preventDefault();
        });
        trans.addEventListener('mousemove', e => {
            if (draw !== null) {
                const { left, top } = trans.getBoundingClientRect();
                const x = e.clientX - left;
                const y = e.clientY - top;
                if (x >= draw.x) {
                    current_box.setAttributeNS(null, 'x', draw.x);
                    current_box.setAttributeNS(null, 'width', x-draw.x);
                } else {
                    current_box.setAttributeNS(null, 'x', x);
                    current_box.setAttributeNS(null, 'width', draw.x-x);
                }
                if (y >= draw.y) {
                    current_box.setAttributeNS(null, 'y', draw.y);
                    current_box.setAttributeNS(null, 'height', y-draw.y);
                } else {
                    current_box.setAttributeNS(null, 'y', y);
                    current_box.setAttributeNS(null, 'height', draw.y-y);
                }
            }
        });
        document.addEventListener('mouseup', () => draw = null);

        const symbol_list = document.getElementById("symbol_list");
        function add_symbol () {
            const li = document.createElement("li");
            li.innerHTML = "<symbol-entry />";
            symbol_list.appendChild(li);
        }
        class SymbolEntry extends HTMLElement {
            constructor () {
                super();
                const col = create(this, 'input', { type: 'color' });
                const text = create(this, 'input', { type: 'text' });
                const edit = create(this, 'button', {}, '📏');
                const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                rect.setAttributeNS(null, 'x', '100');
                rect.setAttributeNS(null, 'y', '100');
                rect.setAttributeNS(null, 'width', '100');
                rect.setAttributeNS(null, 'height', '50');
                rect.setAttributeNS(null, 'fill', 'none');
                rect.setAttributeNS(null, 'stroke', 'red');
                boxes_layer.appendChild(rect);
                current_box = rect;
                edit.onClick = () => current_box = rect;
            }
        }
        customElements.define('symbol-entry', SymbolEntry);
    </script>
</body>
</html>
